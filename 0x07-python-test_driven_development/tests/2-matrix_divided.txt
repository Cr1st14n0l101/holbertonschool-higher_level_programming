The ``2-matrix_divided`` module
======================

Using ''matrix_divided''
-------------------
First import
''matrix_divided'' from the ''2-matrix_divided'' module:
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Base case, List of lits with integers:

	>>> print(matrix_divided([[1, 2, 3],[4, 5, 6]], 3))
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Empty matrix:

    >>> print(matrix_divided([[]], 10))
    Traceback (most recent call last):
    	...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test empty matrices:
    >>> matrix_divided([[], [], []], 10)
    Traceback (most recent call last):
    	...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Tuple of lits with integers:

	>>> print(matrix_divided(([1, 2, 3],[4, 5, 6]), 3))
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

List with a tuple with integers:

	>>> print(matrix_divided([(1, 2, 3),[4, 5, 6]], 3))
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

List of lists, with a list:

	>>> print(matrix_divided([[1, [2], 3],[4, 5, 6]], 3))
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

List of lists, with a tuple:

	>>> print(matrix_divided([[1, (2), 3],[4, 5, 6]], 3))
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

List of lists 1 x 1:

	>>> print(matrix_divided([[5]], 5))
	[[1.0]]

List of lists with diferent size

	>> print(matrix_divided([[2, 4, 8], [1, 3]], 2))
    Traceback (most recent call last):
		...
    TypeError: Each row of the matrix must have the same size

Div isnÂ´t a integer:

	>>> print(matrix_divided([[1, 2, 3],[4, 5, 6]], 'h'))
	Traceback (most recent call last):
		...
	TypeError: div must be a number

Div is equal to zero(0):

	>>> print(matrix_divided([[1, 2, 3],[4, 5, 6]], 0))
	Traceback (most recent call last):
		...
	ZeroDivisionError: division by zero

Div iby negative number:

	>>> print(matrix_divided([[1, 2, 3],[4, 5, 6]], -5))
	[[-0.2, -0.4, -0.6], [-0.8, -1.0, -1.2]]

Div by inf:

    >>> print(matrix_divided([[2, 4, 8], [1, 2, 3]], float('inf')))
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

Div by nan:
    >>> print(matrix_divided([[2, 4, 8], [1, 2, 3]], float('nan')))
    [[nan, nan, nan], [nan, nan, nan]]

Test unmodified matrix:

    >>> m = [[2, 4, 8], [1, 2, 3]]
    >>> matrix_divided(m, 2)
    [[1.0, 2.0, 4.0], [0.5, 1.0, 1.5]]
    >>> m[1][1]
    2

Argument is none:

    >>> print(matrix_divided(none, 1))
    Traceback (most recent call last):
    ...
    NameError: name 'none' is not defined

Argument string:

    >>> print(matrix_divided("foo", 1))
    Traceback (most recent call last):
    	...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Argument empty list:

    >>> print(matrix_divided([], 1))
    Traceback (most recent call last):
    	...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Div by string:

    >>> print(matrix_divided([[2]], "foo"))
    Traceback (most recent call last):
    	...
    TypeError: div must be a number

Whithout arguments:

    >>> print(matrix_divided())
    Traceback (most recent call last):
    	...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'